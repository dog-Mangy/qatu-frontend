stages:
  - test
  - scan
  - quality_gate
  - build
  - push

unit_tests:
  stage: test
  image: node:20  
  script:
    - echo "Running unit tests..."
    - npm ci
    - npm run test -- --watch=false --reporter=junit --outputFile=junit-report.xml
  artifacts:
    reports:
      junit: junit-report.xml


static_code_scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - echo "Ejecutando análisis estático con SonarQube externo..."
    - sonar-scanner \
        -Dsonar.projectKey=frontend-app \
        -Dsonar.sources=. \
        -Dsonar.host.url=https://verde-sonarqube.devops.jala.university \
        -Dsonar.login=$SONAR_TOKEN


quality_gate:
  stage: quality_gate
  image: curlimages/curl:latest
  script:
    - echo "Esperando resultados del Quality Gate..."
    - >
      curl -u $SONAR_TOKEN: https://verde-sonarqube.devops.jala.university/api/qualitygates/project_status?projectKey=frontend-app |
      grep '"status":"OK"' || (echo "Quality Gate failed" && exit 1)


build_container:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Construyendo imagen del contenedor..."
    - docker build -t frontend-app:$CI_COMMIT_SHORT_SHA .

push_container:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Logueando en el container registry..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag frontend-app:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/frontend-app:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend-app:$CI_COMMIT_SHORT_SHA
