stages:
  - test
  - scan
  - quality_gate
  - build
  - push

variables:
  SONAR_HOST_URL: http://sonarqube:9000
  POSTGRES_DB: sonarqube
  POSTGRES_USER: sonar
  POSTGRES_PASSWORD: sonar

unit_tests:
  stage: test
  image: node:20
  script:
    - echo "Running unit tests..."
    - npm ci
    - npm run test -- --watch=false --reporter=junit --outputFile=junit-report.xml
  artifacts:
    reports:
      junit: junit-report.xml

static_code_scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:latest
  services:
    - name: postgres:13
      alias: db
    - name: sonarqube:9.9-community
      alias: sonarqube
  variables:
    SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonarqube
    SONAR_JDBC_USERNAME: sonar
    SONAR_JDBC_PASSWORD: sonar
  script:
    - echo "Esperando a que SonarQube esté listo..."
    - |
      for i in {1..60}; do
        if curl -s "$SONAR_HOST_URL/api/system/health" | grep -q '"status":"UP"'; then
          echo "SonarQube está listo."
          break
        fi
        echo "Esperando a SonarQube... ($i)"
        sleep 5
      done
    - sonar-scanner -Dsonar.projectKey=frontend-app -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN

quality_gate:
  stage: quality_gate
  image: curlimages/curl:latest
  script:
    - echo "Esperando resultados del Quality Gate..."
    - |
      for i in {1..30}; do
        status=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=frontend-app" | jq -r '.projectStatus.status')
        echo "Estado del Quality Gate: $status"
        if [ "$status" = "OK" ]; then
          exit 0
        elif [ "$status" = "ERROR" ]; then
          echo "Quality Gate fallido"
          exit 1
        fi
        sleep 5
      done

build_container:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Construyendo imagen del contenedor..."
    - docker build -t frontend-app:$CI_COMMIT_SHORT_SHA .

push_container:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Logueando en el container registry..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker tag frontend-app:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/frontend-app:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend-app:$CI_COMMIT_SHORT_SHA
